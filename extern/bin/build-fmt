#!/usr/bin/env bash
#

export VERBOSITY
while [[ "$1" =~ ^- ]]; do
  case "$1" in
    -h|-help|--help)
      cat <<'HELPTEXT'
Name
----
build-fmt - Install {fmt} library under current project.

Synopsis
--------
build-fmt --help|-h # produces this text
build-fmt [-v|-q]

Description
-----------
Installs the [{fmt} library](https://fmt.dev/latest/index.html) `extern/`, which is located based on the top-level git repository's location.

IMPORTANT
---------
Must be run inside project git repository.

HELPTEXT
      exit 0;
      ;;
    -q|--quiet)
      VERBOSITY=0
      ;;
    -v|--verbose)
      VERBOSITY=1
      ;;
    *)
      ;;
  esac
  shift
done

LIBNAME="{fmt} library"
GIT_URL="https://github.com/fmtlib/fmt.git"

function Realpath() {
  if [[ $# == 0 ]]; then set - .; fi
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

# Using Essential-IO
SCRIPTDIR="$(Realpath "$(dirname "$0")"/../scripts)"
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath ~/.local/scripts)"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath "$(dirname "$0")")"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  printf "FATAL: Missing required source file '%s'\n" "${SCRIPTDIR}/Essential-IO"
  crash
fi
# shellcheck disable=SC2250,SC1091
source "$SCRIPTDIR/Essential-IO"

# Documentation - minimal
if [[ "$1" =~ ^-{1,2}h(elp)?$ ]]; then
  shift
  echo "
  NAME
  ----

  $0 - sets up the {fmtlib} library as a pre-C++20 alternative for std::format and std::print

  ## SYNOPSIS

    $0 -h|--help
    $0 [--clean]
"
  exit
fi

TOOL_PATH="$(Realpath "$0")"
Report_info "Attempting to build ${LIBNAME} using ${TOOL_PATH}"
HERE="$(pwd)"
if [[ "${HERE}" =~ .*/extern ]]; then
  _do cd "${HERE/extern*/}" || Report_fatal "Trying to escape extern sub-directory failed"
fi
WORKTREE_DIR="$(git rev-parse --show-toplevel)" || Report_fatal "Not in git repo"
REPO_DIR="$(basename "${GIT_URL}" .git)"
BUILD_DIR="build"
INSTALL_DIR="${WORKTREE_DIR}/extern"
_do mkdir -p "${INSTALL_DIR}"
_do cd "${INSTALL_DIR}" || Report_fatal "Unable to enter ${INSTALL_DIR}"
Report_info "Building under ${INSTALL_DIR}"
if [[ "$1" =~ ^-{1,2}clean$ ]]; then
  shift
  _do rm -fr "${REPO_DIR}"
fi
if [[ -d "${REPO_DIR}/.git" ]]; then
  _do git -C "${REPO_DIR}" pull
  Report_info "Successfully updated ${LIBNAME}"
else
  rm -fr "${REPO_DIR}"
  _do git clone "${GIT_URL}" || Report_fatal "Unable to clone"
  Report_info "Successfully cloned ${LIBNAME}"
fi
_do cd "${REPO_DIR}" || Report_fatal "Unable to enter ${REPO_DIR}"
_do cmake -B "${BUILD_DIR}" -S . -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" || Report_fatal "Unable to configure cmake"
_do cmake --build "${BUILD_DIR}" || Report_fatal "Failed to compile and link"
_do cmake --install build || Report_fatal "Failed to install"
Report_info "Successfully built ${LIBNAME}"

# vim:nospell
